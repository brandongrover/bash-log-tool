#! /bin/bash
# Sources
source /home/f43ak/git/admintool/config/exclude.list
source /home/f43ak/git/admintool/config/tool.config

function logSplit () {
clear
echo "Checking log density..."
read -p "Log density at $logDensity entries. Would you like to archive current log? (y/n): "  archiveCheck
if [ "$archiveCheck" == 'y' ]
then
	if [ "$logDensity" > "$logEntryMax" ]
	then
		echo "Moving current log to archive..."
		$(mv "$auth" "$archiveLocation$archiveName")
		echo "File moved to: $archiveLocation$archiveName"
		echo "Restarting dependant services..."
		$(systemctl restart syslog-ng)
		sleep 1
		echo "Daemons restarted."
		sleep 1
		echo "Starting Admin Tool..."
		sleep 5
		clear
	else
		echo "Log size not at limit."
	fi
else
	echo "Continuing to Admin Tool..."
	sleep 5
	clear
fi
}
function startUp () {
# Run Log Splitter?
if [[ "$enableSplitter" == true && "$logDensity" > "$logEntryWarn" ]]
then
	logSplit
else
	:
fi

# Check if sudo
if [ "$(id -u)" != "0" ]
then
        echo -e "\e[91mUnauthorized user\e[39m"
        exit 1
fi
}
startUp
# Usage
function usage() {
echo -e "\e[96mParameters:"
echo -e "\e[32m-b  or --showban \e[39m[true|false] show the sshd ban stats"
echo -e "\e[32m-f  or --failedamount    \e[39m[value]  amount of recent failed access attempts to display"
echo -e "\e[32m-s  or --successamount   \e[39m[value] amount of recent successful access events to display"
echo -e "\e[32m-e  or --exclude \e[39m[string] exclusion from fail/success event search parameters"
echo -e "\e[32m-u  or --userswitch      \e[39m[value] amount of recent switch user events to display"
echo -e "\e[32m-a  or --userattempts    \e[39m[true|false] show the user attempt events"
echo -e "\e[32m-av or --attemptvalue    \e[39m[value] amount of recent non-root user attempts to display"
}

# Argument Handler
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -a|--userattempts)
            showUserAttempts="$2"
            shift
            shift
	    ;;
    -av|--attemptvalue)
            attemptValue="$2"
            shift
            shift
            ;;
    -b|--showban)
            showBan="$2"
            shift
            shift
            ;;
    -f|--failedamount)
            failedAmount="$2"
            shift
            shift
            ;;
    -s|--successamount)
            successAmount="$2"
            shift
            shift
            ;;
    -e|--exclude)
            exclude="$2"
            shift
            shift
            ;;
   -u|--userswitch)
           switchEvents="$2"
           shift
           shift
           ;;
   -h|-?|--help)
           usage
           exit
           ;;
    *)    # default case
            POSITIONAL+=("$1")
            shift
            ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Array Of User Processing (Checks if they successfully tried logging into valid accounts
for (( t=0; t<len; t++));
do
	# Find Occurrences of failed passwords/accepted passwords
        failedUserSearch=$(cat /var/log/$sshFileName | grep "sshd" | grep "user" | grep "Failed password" | grep ${userList[$t]} | grep -v root | wc -l)
	failedRootSearch=$(cat /var/log/$sshFileName | grep "sshd" | grep "user" | grep "Failed password" | grep ${userList[$t]} | grep root | wc -l)
	successUserSearch=$(cat /var/log/$sshFileName | grep "sshd" | grep "user" | grep "Accepted password" | grep ${userList[$t]})
	failedUserCounter=$(($failedUserCounter + $failedUserSearch))
	failedRootCounter=$(($failedRootCounter + $failedRootSearch))
done
#echo ${#rootAttemptArray[@]}
#echo ${#nonRootAttemptArray[@]}
# Search/Exclude/Limit Function
function searchExcluder() {
func=$1
key=$2

while [[ $2 -gt 0 ]]
do
	case $key in
	1) # failedAmount
		tail=" | tail -$failedAmount"
		excludeNameList=("${excludeFailedSSH[@]}")
		shift
		shift
		;;
	2) # successAmount
		tail=" | tail -$successAmount"
		excludeNameList=("${excludeSuccessfulSSH[@]}")	
		shift
		shift
		;;
	3) #switchEvents
		tail=" | tail -$switchEvents"
		excludeNameList=("${excludeSwitchEvents[@]}")
		shift
		shift
		;;
	4) # attemptValue
		tail=" | tail -$attemptValue"
		shift
		shift
		;; 
	*) # defaultCase
	 	tail=' | tail -5'
		exclude='NULLEXCLUSION'
		shift
		shift
		;;
esac
done
xLen=${#excludeNameList[@]}
for ((x=0; x<xLen; x++)); 
do
	grepString=" | grep -v ${excludeNameList[$x]}"
	grepList+=$grepString
done
results=($func $grepList $tail)
eval "${results[@]}"
}
########################################################

# Start Print
echo -e $spacer 
echo -e "\e[90m*\e[96m                                                     Admin Tool                                                            \e[90m \e[49m*"
echo -e $spacer

# Check for intrusion
if [ "$unAuthorized" != "0" ]
        then
                intrusion=Yes
        else
                intrusion=No
fi

# Intrusion Check Print
echo -e "\e[96m Intrusion: \e[33m$intrusion\e[25m\e[90m"
echo -e "\e[96m Log Size: \e[33m$authSize"" \e[25m\e[90m"
echo -e "\e[96m Log Entries: \e[33m$authEntries \e[25m\e[90m"
echo -e "\e[96m Failed Entries: \e[33m$failedLogins \e[25m\e[90m"
echo -e "\e[96m Root Attempts: \e[33m$failedRootCounter \e[90m"
echo -e "\e[96m User Account Attempts: \e[33m$failedUserCounter \e[90m"

# Recent Failed Events Output
echo -e $spacer
echo -e "\e[96m Recent failed events:"
echo -e $spacer
echo -e "\e[91m"
searchExcluder "$recentFailedEvents" '1'
echo -e "\e[0m"
echo -e $spacer

# Recent Successful Events Output
echo -e "\e[96m Recent successful events:"
echo -e $spacer
echo -e "\e[92m"
searchExcluder "$recentSuccessfulEvents" '2'
echo -e "\e[0m"
echo -e $spacer

# Switch User Events
echo -e "\e[96m Recent switch user events:"
echo -e $spacer
echo -e "\e[33m"
searchExcluder "$switchUserEvents" '3'
echo -e "\e[0m"
echo -e $spacer

# Show User Attempts?
if [ "$showUserAttempts" == true ]
then
        echo -e "\e[96m User Attempts:"
        echo -e $spacer
        echo -e "\e[33m$userAttempts" | fold -w 130 -s
        echo -e $spacer
fi

# Show Ban?
if [ "$showBan" == true ]
then
        echo -e "\e[96m Ban Stats:"
        echo -e $spacer
        echo -e "\e[33m$banStats" | fold -w 130 -s
        echo -e $spacer
fi
